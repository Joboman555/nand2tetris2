function Hexagon.new 0
push constant 3
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push argument 1
pop this 1
push argument 2
pop this 2
push pointer 0
push constant 0
not
call Hexagon.draw 2
pop temp 0
push pointer 0
return
function Hexagon.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Hexagon.draw 4
push argument 0
pop pointer 0
push this 2
push constant 43
call Math.multiply 2
push constant 100
call Math.divide 2
pop local 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push this 0
push this 2
push constant 2
call Math.divide 2
sub
push this 1
push this 0
push this 2
push constant 4
call Math.divide 2
sub
push this 1
push local 0
sub
call Screen.drawLine 4
pop temp 0
push this 0
push this 2
push constant 4
call Math.divide 2
sub
push this 1
push local 0
sub
push this 0
push this 2
push constant 4
call Math.divide 2
add
push this 1
push local 0
sub
call Screen.drawLine 4
pop temp 0
push this 0
push this 2
push constant 4
call Math.divide 2
add
push this 1
push local 0
sub
push this 0
push this 2
push constant 2
call Math.divide 2
add
push this 1
call Screen.drawLine 4
pop temp 0
push this 0
push this 2
push constant 2
call Math.divide 2
add
push this 1
push this 0
push this 2
push constant 4
call Math.divide 2
add
push this 1
push local 0
add
call Screen.drawLine 4
pop temp 0
push this 0
push this 2
push constant 4
call Math.divide 2
add
push this 1
push local 0
add
push this 0
push this 2
push constant 4
call Math.divide 2
sub
push this 1
push local 0
add
call Screen.drawLine 4
pop temp 0
push this 0
push this 2
push constant 4
call Math.divide 2
sub
push this 1
push local 0
add
push this 0
push this 2
push constant 2
call Math.divide 2
sub
push this 1
call Screen.drawLine 4
pop temp 0
push constant 1
pop local 1
label WHILE_EXP0
push local 1
push constant 2
push local 0
call Math.multiply 2
lt
not
if-goto WHILE_END0
push local 1
neg
push constant 1000
call Math.multiply 2
push constant 577
call Math.divide 2
push this 2
push constant 4
call Math.divide 2
add
pop local 2
push this 1
push local 0
sub
push local 1
sub
pop local 3
push local 2
push local 3
push local 2
push constant 50
add
push local 3
call Screen.drawLine 4
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
